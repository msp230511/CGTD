 (all('td.task_name').to_a+all('td.completed_task_name').to_a).any? { |td| td.text == string }
[:compare_count, :matches_count?, :size, :at, :values_at, :[], :sample, :empty?, :index, :negative_failure_message, :inspect, :allow_reload!, :failure_message, :length, :each, :last, :unfiltered_size, :drop_while, :cycle, :chunk, :slice_before, :slice_after, :slice_when, :chunk_while, :sum, :uniq, :compact, :compact_blank, :index_by, :without, :lazy, :excluding, :exclude?, :pluck, :pick, :in_order_of, :sole, :many?, :to_h, :include?, :including, :to_set, :maximum, :max, :min, :minimum, :as_json, :find, :to_a, :index_with, :chain, :entries, :sort, :sort_by, :grep, :grep_v, :count, :detect, :find_index, :find_all, :select, :filter, :filter_map, :reject, :collect, :map, :flat_map, :collect_concat, :inject, :reduce, :partition, :group_by, :tally, :first, :all?, :any?, :one?, :none?, :minmax, :min_by, :max_by, :minmax_by, :member?, :each_with_index, :reverse_each, :each_entry, :each_slice, :each_cons, :each_with_object, :zip, :take, :take_while, :drop, :untaint, :require_dependency, :to_json, :presence, :acts_like?, :in?, :presence_in, :blank?, :duplicable?, :to_param, :to_query, :present?, :to_yaml, :instance_values, :instance_variable_names, :with_options, :html_safe?, :deep_dup, :pretty_print_instance_variables, :pretty_print, :pretty_print_cycle, :pretty_print_inspect, :try!, :try, :trap, :singleton_class, :dup, :itself, :taint, :tainted?, :untrust, :untrusted?, :trust, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :display, :hash, :public_send, :class_eval, :class, :frozen?, :tap, :then, :yield_self, :extend, :clone, :method, :public_method, :singleton_method, :<=>, :define_singleton_method, :===, :=~, :!~, :pretty_inspect, :nil?, :eql?, :respond_to?, :freeze, :object_id, :gem, :send, :to_enum, :enum_for, :to_s, :byebug, :remote_byebug, :debugger, :__send__, :!, :__id__, :instance_eval, :==, :instance_exec, :!=, :singleton_method_added, :equal?, :should, :should_not] (all('td.task_name').to_a+all('td.completed_task_name').to_a).any? { |td| td.text == string }
[:compare_count, :matches_count?, :size, :at, :values_at, :[], :sample, :empty?, :index, :negative_failure_message, :inspect, :allow_reload!, :failure_message, :length, :each, :last, :unfiltered_size, :drop_while, :cycle, :chunk, :slice_before, :slice_after, :slice_when, :chunk_while, :sum, :uniq, :compact, :compact_blank, :index_by, :without, :lazy, :excluding, :exclude?, :pluck, :pick, :in_order_of, :sole, :many?, :to_h, :include?, :including, :to_set, :maximum, :max, :min, :minimum, :as_json, :find, :to_a, :index_with, :chain, :entries, :sort, :sort_by, :grep, :grep_v, :count, :detect, :find_index, :find_all, :select, :filter, :filter_map, :reject, :collect, :map, :flat_map, :collect_concat, :inject, :reduce, :partition, :group_by, :tally, :first, :all?, :any?, :one?, :none?, :minmax, :min_by, :max_by, :minmax_by, :member?, :each_with_index, :reverse_each, :each_entry, :each_slice, :each_cons, :each_with_object, :zip, :take, :take_while, :drop, :untaint, :require_dependency, :to_json, :presence, :acts_like?, :in?, :presence_in, :blank?, :duplicable?, :to_param, :to_query, :present?, :to_yaml, :instance_values, :instance_variable_names, :with_options, :html_safe?, :deep_dup, :pretty_print_instance_variables, :pretty_print, :pretty_print_cycle, :pretty_print_inspect, :try!, :try, :trap, :singleton_class, :dup, :itself, :taint, :tainted?, :untrust, :untrusted?, :trust, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :display, :hash, :public_send, :class_eval, :class, :frozen?, :tap, :then, :yield_self, :extend, :clone, :method, :public_method, :singleton_method, :<=>, :define_singleton_method, :===, :=~, :!~, :pretty_inspect, :nil?, :eql?, :respond_to?, :freeze, :object_id, :gem, :send, :to_enum, :enum_for, :to_s, :byebug, :remote_byebug, :debugger, :__send__, :!, :__id__, :instance_eval, :==, :instance_exec, :!=, :singleton_method_added, :equal?, :should, :should_not]
all('td.task_name').methods
all('td.task_name').type
type all('td.task_name')
(all('td.task_name')+all('td.completed_task_name')).any? { |td| td.text == string }
exists = all('td.task_name').concat(all('td.completed_task_name')).any? { |td| td.text == string }
all('td.completed_task_name')exists = all('td.task_name').concat(all('td.completed_task_name')).any? { |td| td.text == string
all('td.completed_task_name')
all('td.task_name')
all('td.task_name').length
continue
all('td.task_name').length
find_link(class: 'active', id: string+"2")
find_link(class: 'active', id: string)
exit
all("td.task_duedate")[2].te
all("td.task_duedate")[2].text
all("td.task_duedate")[1].text
all("td.task_duedate")[0].text
all("td.task_duedate").length
all("td.due_at").length
all("td.duae_at").length
all("td.task_name").length
all(td.task_name).length
exit
expect(expect(all('td.task_name').any? { |td| td.text == string } or all('td.completed_task_name').any? { |td| td.text == string }).to be(false)
all('td.task_name').any? { |td| td.text == string } or all('td.completed_task_name').any? { |td| td.text == string }
all('td.task_name').any? { |td| td.text == string }
exit
all('td.task_name').length
all('td.task_name')
find('tr', text: task).find(".#{button_class}").click
find('tr', text: task)
task
exit
all(".completed_task_name").length
all(".task_name").length
find('td.task_name'){|name| name.text == "Take out the trash"}.find(".complete_task").click
exit
find('td.task_name'){|name| name.text == "Take out the trash"}.find(".complete_task").click
find('td.completed_task_name'){|name| name.text == "Take out the trash"}
find('td.completed_task_name').each_with_index{|name,i| puts name, i}
all('td.completed_task_name')[0].text
all('td.completed_task_name')[0]
all('td.task_name')[0]
all('td.task_name')[1]
all('td.task_actions')[1]
page.current_path
find(".complete_task").click
page.current_path
all('td.task_name')[0].text
within all('td.task_name')[0] {find(".complete_task").click}
all('td.task_name')[0].text
all('td.task_actions')[0].text
all('td.task_actions')[0]
within all('td.task_actions')[0] {find(".complete_task").click}
within all('td.task_actions')[0] do
find(".complete_task").click
find(".task_complete").click
 all('td.task_name')[0].text
 all('td.task_name')
 all('td.completed_task_name')
 all('td.completed_task_name')[0].length
 all('td.task_name')[0].length
 all('td.task_name')[0].click_link_or_button
 all('td.task_actions')[0].methods
 all('td.task_actions')[0]
 all('td.task_name')[0].text
 all('td.task_actions')[0].text
 all('td.task_actions')[0],text
 all('td.task_actions')[0][1]
 all('td.task_actions')[0][0]
 all('td.task_actions')[0]
 all('td.task_actions').length
exit
all('td.task_name')[0]
all('td.task_name')[0].text
all('td.task_name')[0].click_on(id: "TEST")
all('td.task_name')[i].click_on(id: "TEST")
exit
